[AstNode
{
inner:
CommandDefinition
{
attributes:
[],
identifier:
Identifier(Text("Add")),
fields:
[FieldDefinition
{
identifier:
Identifier(Text("count")),
field_type:
Int
}],
seal:
[],
open:
[],
policy:
[AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("envelope_id")),
expression:
ForeignFunctionCall(ForeignFunctionCall
{
module:
Identifier(Text("envelope")),
identifier:
Identifier(Text("command_id")),
arguments:
[Identifier(Identifier(Text("envelope")))]
})
}),
locator:
519
},
AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("author")),
expression:
ForeignFunctionCall(ForeignFunctionCall
{
module:
Identifier(Text("envelope")),
identifier:
Identifier(Text("author_id")),
arguments:
[Identifier(Identifier(Text("envelope")))]
})
}),
locator:
584
},
AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("new_x")),
expression:
Add(Identifier(Identifier(Text("x"))),
Identifier(Identifier(Text("count"))))
}),
locator:
643
},
AstNode
{
inner:
Check(CheckStatement
{
expression:
InternalFunction(Exists(FactLiteral
{
identifier:
Identifier(Text("TestFact")),
key_fields:
[(Identifier(Text("v")),
Expression(String(Text("test"))))],
value_fields:
Some([])
}))
}),
locator:
681
},
AstNode
{
inner:
Match(MatchStatement
{
expression:
Identifier(Identifier(Text("x"))),
arms:
[MatchArm
{
pattern:
Values([Int(0)]),
statements:
[AstNode
{
inner:
Check(CheckStatement
{
expression:
FunctionCall(FunctionCall
{
identifier:
Identifier(Text("positive")),
arguments:
[Optional(Some(Identifier(Identifier(Text("new_x")))))]
})
}),
locator:
795
}]
},
MatchArm
{
pattern:
Values([Int(1)]),
statements:
[AstNode
{
inner:
Check(CheckStatement
{
expression:
FunctionCall(FunctionCall
{
identifier:
Identifier(Text("positive")),
arguments:
[Optional(None)]
})
}),
locator:
896
}]
},
MatchArm
{
pattern:
Default,
statements:
[]
}]
}),
locator:
734
},
AstNode
{
inner:
If(IfStatement
{
branches:
[(Equal(Identifier(Identifier(Text("x"))),
Int(3)),
[AstNode
{
inner:
Check(CheckStatement
{
expression:
LessThan(Identifier(Identifier(Text("new_x"))),
Int(10))
}),
locator:
1056
}])],
fallback:
None
}),
locator:
1024
},
AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("a")),
expression:
ForeignFunctionCall(ForeignFunctionCall
{
module:
Identifier(Text("foo")),
identifier:
Identifier(Text("ext_func")),
arguments:
[Identifier(Identifier(Text("x")))]
})
}),
locator:
1108
},
AstNode
{
inner:
Finish([AstNode
{
inner:
Create(CreateStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[(Identifier(Text("v")),
Expression(String(Text("hello"))))],
value_fields:
Some([(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("x"))))),
(Identifier(Text("y")),
Expression(Negative(Identifier(Identifier(Text("x"))))))])
}
}),
locator:
1179
},
AstNode
{
inner:
Update(UpdateStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[],
value_fields:
Some([(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("x")))))])
},
to:
[(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("new_x")))))]
}),
locator:
1235
},
AstNode
{
inner:
Delete(DeleteStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[(Identifier(Text("v")),
Expression(String(Text("hello"))))],
value_fields:
None
}
}),
locator:
1288
},
AstNode
{
inner:
Emit(NamedStruct(NamedStruct
{
identifier:
Identifier(Text("Added")),
fields:
[(Identifier(Text("x")),
Identifier(Identifier(Text("new_x")))),
(Identifier(Text("y")),
Identifier(Identifier(Text("count"))))]
})),
locator:
1329
}]),
locator:
1150
}],
recall:
[AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("envelope_id")),
expression:
ForeignFunctionCall(ForeignFunctionCall
{
module:
Identifier(Text("envelope")),
identifier:
Identifier(Text("command_id")),
arguments:
[Identifier(Identifier(Text("envelope")))]
})
}),
locator:
1501
},
AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("author")),
expression:
ForeignFunctionCall(ForeignFunctionCall
{
module:
Identifier(Text("envelope")),
identifier:
Identifier(Text("author_id")),
arguments:
[Identifier(Identifier(Text("envelope")))]
})
}),
locator:
1566
},
AstNode
{
inner:
Let(LetStatement
{
identifier:
Identifier(Text("new_x")),
expression:
Add(Identifier(Identifier(Text("x"))),
Identifier(Identifier(Text("count"))))
}),
locator:
1625
},
AstNode
{
inner:
Finish([AstNode
{
inner:
Create(CreateStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[(Identifier(Text("v")),
Expression(String(Text("hello"))))],
value_fields:
Some([(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("x"))))),
(Identifier(Text("y")),
Expression(Negative(Identifier(Identifier(Text("x"))))))])
}
}),
locator:
1692
},
AstNode
{
inner:
Update(UpdateStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[],
value_fields:
Some([(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("x")))))])
},
to:
[(Identifier(Text("x")),
Expression(Identifier(Identifier(Text("new_x")))))]
}),
locator:
1748
},
AstNode
{
inner:
Delete(DeleteStatement
{
fact:
FactLiteral
{
identifier:
Identifier(Text("F")),
key_fields:
[(Identifier(Text("v")),
Expression(String(Text("hello"))))],
value_fields:
None
}
}),
locator:
1801
},
AstNode
{
inner:
Emit(NamedStruct(NamedStruct
{
identifier:
Identifier(Text("Added")),
fields:
[(Identifier(Text("x")),
Identifier(Identifier(Text("new_x")))),
(Identifier(Text("y")),
Identifier(Identifier(Text("count"))))]
})),
locator:
1842
}]),
locator:
1663
}]
},
locator:
406
}]
