//! Code generated by `policy-ifgen`. DO NOT EDIT.
#![allow(clippy::duplicated_attributes)]
#![allow(clippy::enum_variant_names)]
#![allow(missing_docs)]
#![allow(non_snake_case)]
#![allow(unused_imports)]
extern crate alloc;
use alloc::{string::String, vec::Vec};
use policy_ifgen::{
    macros::{actions, effect, effects, value},
    ClientError, Id, Value,
};
/// Enum of policy effects that can occur in response to a policy action.
#[effects]
pub enum Effect {
    TtcTeamCreated(TtcTeamCreated),
    OwnerAdded(OwnerAdded),
    AdminAdded(AdminAdded),
    OperatorAdded(OperatorAdded),
    SatelliteAdded(SatelliteAdded),
    OwnerRemoved(OwnerRemoved),
    AdminRemoved(AdminRemoved),
    OperatorRemoved(OperatorRemoved),
    SatelliteRemoved(SatelliteRemoved),
    ApsLabelCreated(ApsLabelCreated),
    ApsLabelAssigned(ApsLabelAssigned),
    ApsLabelRevoked(ApsLabelRevoked),
    ApsBidiChannelCreated(ApsBidiChannelCreated),
}
/// TtcTeamCreated policy effect.
#[effect]
pub struct TtcTeamCreated {
    pub name: String,
    pub owner_id: Id,
}
/// OwnerAdded policy effect.
#[effect]
pub struct OwnerAdded {
    pub user_id: Id,
    pub name: String,
    pub ident_pk: Vec<u8>,
    pub sign_pk: Vec<u8>,
    pub enc_pk: Vec<u8>,
}
/// AdminAdded policy effect.
#[effect]
pub struct AdminAdded {
    pub user_id: Id,
    pub name: String,
    pub ident_pk: Vec<u8>,
    pub sign_pk: Vec<u8>,
    pub enc_pk: Vec<u8>,
}
/// OperatorAdded policy effect.
#[effect]
pub struct OperatorAdded {
    pub user_id: Id,
    pub name: String,
    pub ident_pk: Vec<u8>,
    pub sign_pk: Vec<u8>,
    pub enc_pk: Vec<u8>,
}
/// SatelliteAdded policy effect.
#[effect]
pub struct SatelliteAdded {
    pub user_id: Id,
    pub name: String,
    pub ident_pk: Vec<u8>,
    pub sign_pk: Vec<u8>,
    pub enc_pk: Vec<u8>,
}
/// OwnerRemoved policy effect.
#[effect]
pub struct OwnerRemoved {
    pub user_id: Id,
}
/// AdminRemoved policy effect.
#[effect]
pub struct AdminRemoved {
    pub user_id: Id,
}
/// OperatorRemoved policy effect.
#[effect]
pub struct OperatorRemoved {
    pub user_id: Id,
}
/// SatelliteRemoved policy effect.
#[effect]
pub struct SatelliteRemoved {
    pub user_id: Id,
}
/// ApsLabelCreated policy effect.
#[effect]
pub struct ApsLabelCreated {
    pub name: String,
    pub label: i64,
}
/// ApsLabelAssigned policy effect.
#[effect]
pub struct ApsLabelAssigned {
    pub user_id: Id,
    pub name: String,
    pub label: i64,
    pub op: String,
}
/// ApsLabelRevoked policy effect.
#[effect]
pub struct ApsLabelRevoked {
    pub user_id: Id,
    pub label: i64,
}
/// ApsBidiChannelCreated policy effect.
#[effect]
pub struct ApsBidiChannelCreated {
    pub user1: Id,
    pub user2: Id,
    pub label: i64,
}
/// Implements all supported policy actions.
#[actions]
pub trait ActorExt {
    fn create_ttc_team(
        &mut self,
        ttc_team_name: String,
        user_name: String,
        ident_pk: Vec<u8>,
        sign_pk: Vec<u8>,
        enc_pk: Vec<u8>,
    ) -> Result<(), ClientError>;
    fn add_owner(
        &mut self,
        user_id: Id,
        name: String,
        ident_pk: Vec<u8>,
        sign_pk: Vec<u8>,
        enc_pk: Vec<u8>,
    ) -> Result<(), ClientError>;
    fn add_admin(
        &mut self,
        user_id: Id,
        name: String,
        ident_pk: Vec<u8>,
        sign_pk: Vec<u8>,
        enc_pk: Vec<u8>,
    ) -> Result<(), ClientError>;
    fn add_operator(
        &mut self,
        user_id: Id,
        name: String,
        ident_pk: Vec<u8>,
        sign_pk: Vec<u8>,
        enc_pk: Vec<u8>,
    ) -> Result<(), ClientError>;
    fn add_satellite(
        &mut self,
        user_id: Id,
        name: String,
        ident_pk: Vec<u8>,
        sign_pk: Vec<u8>,
        enc_pk: Vec<u8>,
    ) -> Result<(), ClientError>;
    fn remove_owner(&mut self, user_id: Id) -> Result<(), ClientError>;
    fn remove_admin(&mut self, user_id: Id) -> Result<(), ClientError>;
    fn remove_operator(&mut self, user_id: Id) -> Result<(), ClientError>;
    fn remove_satellite(&mut self, user_id: Id) -> Result<(), ClientError>;
    fn create_aps_label(&mut self, name: String, label: i64) -> Result<(), ClientError>;
    fn assign_aps_label(
        &mut self,
        user_id: Id,
        label: i64,
        op: String,
    ) -> Result<(), ClientError>;
    fn revoke_aps_label(&mut self, user_id: Id, label: i64) -> Result<(), ClientError>;
    fn create_aps_bidi_channel(
        &mut self,
        peer_id: Id,
        label: i64,
    ) -> Result<(), ClientError>;
    fn create_aps_uni_channel(
        &mut self,
        seal_id: Id,
        open_id: Id,
        label: i64,
    ) -> Result<(), ClientError>;
}
