[package]
name = "aranya-crypto"
description = "The Aranya Cryptography Engine"
version = "0.7.1"
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
bench = false

[features]
default = [
	"getrandom",
]

# Enable AFC support.
afc = [
	"dep:byteorder",
]

# Enable APQ support.
apq = []

# Enable AQC support.
aqc = [
	# AQC really only needs the cipher suites, but including the
	# rest of the module is currently NBD.
	"tls",
]

# Enable allocations.
alloc = [
	"buggy/alloc",
	"ciborium-io?/alloc",
	"rustix?/alloc",
	"sha3-utils/alloc",
	"spideroak-crypto/alloc",
]

# Enable BearSSL.
bearssl = ["spideroak-crypto/bearssl"]

# Enable committing AEAD implementations.
committing-aead = ["spideroak-crypto/committing-aead"]

# Implement `Clone` for the built-in AEADs.
clone-aead = ["spideroak-crypto/clone-aead"]

# Enable Ed25519 batch signature verification.
#
# NB: this is NOT supported on big-endian architectures.
#
# This is its own feature because of a weird interaction
# between cargo, ed25519-dalek, and VxWorks.
#
# ed25519-dalek's `batch` feature requires `alloc`, so normally
# we'd put "ed25519-dalek/batch" behind our `alloc` feature.
#
# However, ed25519-dalek's `batch` feature does not build for
# vxworks/ppc because its merlin dependency does not support
# big-endian architectures.
#
# Cargo does not support target-specific features, so we're
# unable to express "enable ed25519-dalek/batch only if `alloc`
# is enabled and the current architecture is little-endian."
ed25519_batch = [
	"alloc",

	"spideroak-crypto/ed25519_batch",
]

# Enable the file system backed `KeyStore`.
fs-keystore = [
	"alloc", # ciborium already requires alloc

	"dep:cfg-if",
	"dep:ciborium",
	"dep:ciborium-io",
	"dep:rustix",
]

# Enable `getrandom` support.
#
# NB: `getrandom` does not support VxWorks < 7.
getrandom = ["spideroak-crypto/getrandom"]

# Enable cryptographically hazardous code.
hazmat = ["spideroak-crypto/hazmat"]

# Enable the in-memory `KeyStore`.
memstore = [
	"alloc", # ciborium already requires alloc

	"dep:ciborium",
]

# Enable `proptest::arbitrary::Arbitrary` implemenations
proptest = ["alloc", "dep:proptest", "dep:proptest-derive"]

# Enable compat with the `rand`, `rand_core`, etc. crates.
rand_compat = ["spideroak-crypto/rand_compat"]

# Use std.
std = [
	"alloc",
	# If we're already using `std`, we might as well enable
	# `Csprng` support for `OsRng`. Doing this makes the
	# `#[cfg(...)]` blocks easier to manage.
	"getrandom",

	"buggy/std",
	"byteorder?/std",
	"ciborium-io?/std",
	"ciborium?/std",
	"proptest?/std",
	"rustix?/std",
	"serde/std",
	"sha3-utils/std",
	"siphasher/std",
	"spideroak-base58/std",
	"spideroak-crypto/std",
	"thiserror/std",
]

# Include testing utilities.
test_util = [
	"afc",
	"alloc",
	"apq",
	"aqc",
	"proptest",
	"tls",

	"spideroak-crypto/test_util",

	"dep:ciborium",
]

# Enable TLS utilities.
tls = []

# Use a system provided TRNG for the default CSPRNG.
trng = ["spideroak-crypto/trng"]

[dependencies]
buggy = { version = "0.1.0", default-features = false }

spideroak-base58 = { version = "0.2.0", default-features = false }
spideroak-crypto = { version = "0.6.0", default-features = false, features = ["serde"] }

byteorder = { workspace = true, default-features = false, optional = true }
cfg-if = { workspace = true, default-features = false, optional = true }
ciborium = { version = "0.2", default-features = false, optional = true }
ciborium-io = { version = "0.2", default-features = false, optional = true }
derive-where = { workspace = true, default-features = false, features = ["serde"] }
proptest = { workspace = true, default-features = false, features = ["alloc"], optional = true }
proptest-derive = { workspace = true, optional = true }
rustix = { version = "0.38", default-features = false, features = ["fs"], optional = true }
serde = { workspace = true, default-features = false, features = ["derive"] }
sha3-utils = { version = "0.5", default-features = false }
siphasher = { version = "1", default-features = false }
thiserror = { workspace = true }
zerocopy = { version = "0.8", default-features = false, features = ["derive"] }

[dev-dependencies]
# A little bit of a hack: always certain features for tests and
# examples.
aranya-crypto = { path = ".", features = ["alloc", "test_util"] }

criterion = { workspace = true }
postcard = { workspace = true, features = ["alloc"] }
rand = { workspace = true, features = ["std", "std_rng"] }
serde = { workspace = true, default-features = false, features = ["derive"] }
serde_json = { version = "1", default-features = false }
tempfile = { version = "3" }

[[bench]]
name = "context"
harness = false

[[example]]
name = "hsm"
crate-type = ["lib"]

[package.metadata.docs.rs]
features = [
	"clone-aead",
	"committing-aead",
	"ed25519_batch",
	"fs-keystore",
	"memstore",
	"rand_compat",
	"std",
	"test_util",
	"trng",
]

[package.metadata.cargo-all-features]
always_include_features = [
	"afc",
	"alloc",
	"apq",
	"aqc",
	"bearssl",
	"clone-aead",
	"committing-aead",
	"ed25519_batch",
	"fs-keystore",
	"getrandom",
	"hazmat",
	"memstore",
	"proptest",
	"rand_compat",
	"std",
	"test_util",
	"tls",
]

skip_feature_sets = []

denylist = []

[package.metadata.cargo-machete]
ignored = ["old-generic-array"]
