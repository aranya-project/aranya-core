use std::collections::{HashMap, HashSet};

use aranya_policy_ast::{FieldDefinition, TypeKind, VType};
use aranya_policy_compiler::compile::target::CompileTarget;
use proc_macro2::{Span, TokenStream};
use quote::quote;

/// Generate rust source code from a policy [`CompileTarget`].
#[allow(clippy::panic)]
pub fn generate_code(target: &CompileTarget) -> String {
    let reachable = collect_reachable_types(target);

    let structs = target
        .struct_defs
        .iter()
        .filter(|(id, _fields)| reachable.contains(id.as_str()))
        .map(|(id, fields)| {
            let doc = format!(" {} policy struct.", id);
            let name = mk_ident(id);
            let names = fields.iter().map(|f| mk_ident(&f.identifier.name));
            let types = fields.iter().map(|f| vtype_to_rtype(&f.field_type));
            quote! {
                #[doc = #doc]
                #[value]
                pub struct #name {
                    #(pub #names: #types),*
                }
            }
        });

    let enums = target
        .enum_defs
        .iter()
        .filter(|(id, _values)| reachable.contains(id.as_str()))
        .map(|(id, values)| {
            let doc = format!(" {} policy enum.", id);
            let name = mk_ident(id);
            let names = values.iter().map(|(id, _)| mk_ident(id));
            quote! {
                #[doc = #doc]
                #[value]
                pub enum #name {
                    #(#names),*
                }
            }
        });

    let effects = target.effects.iter().map(|s| {
        let fields = target
            .struct_defs
            .get(s)
            .unwrap_or_else(|| panic!("Effect not defined: {s}"));
        let doc = format!(" {} policy effect.", s);
        let ident = mk_ident(s);
        let field_idents = fields.iter().map(|f| mk_ident(&f.identifier.name));
        let field_types = fields.iter().map(|f| vtype_to_rtype(&f.field_type));
        quote! {
            #[doc = #doc]
            #[effect]
            pub struct #ident {
                #(pub #field_idents: #field_types),*
            }
        }
    });

    let effect_enum = {
        let idents = target.effects.iter().map(mk_ident);
        quote! {
            #[effects]
            pub enum Effect {
                #(
                    #idents(#idents)
                ),*
            }
        }
    };

    let actions = {
        let sigs = target.action_defs.iter().map(|def| {
            let ident = mk_ident(def.name.as_str());
            let param_names = def.params.iter().map(|param| mk_ident(param.name.as_str()));
            let param_types = def.params.iter().map(|param| vtype_to_rtype(&param.ty));
            quote! {
                fn #ident(&mut self, #(#param_names: #param_types),*) -> Result<(), ClientError>;
            }
        });
        quote! {
            /// Implements all supported policy actions.
            #[actions]
            pub trait ActorExt {
                #( #sigs )*
            }
        }
    };

    prettyplease::unparse(&syn::parse_quote! {
        //! This code is @generated by `policy-ifgen`. DO NOT EDIT.
        #![allow(clippy::duplicated_attributes)]
        #![allow(clippy::enum_variant_names)]
        #![allow(missing_docs)]
        #![allow(non_snake_case)]
        #![allow(unused_imports)]

        extern crate alloc;

        use alloc::vec::Vec;

        use aranya_policy_ifgen::{
            macros::{actions, effect, effects, value},
            BaseId, ClientError, Value, Text,
        };

        #(#structs)*
        #(#enums)*

        /// Enum of policy effects that can occur in response to a policy action.
        #effect_enum
        #(#effects)*

        #actions
    })
}

fn vtype_to_rtype(ty: &VType) -> TokenStream {
    use aranya_policy_ast::TypeKind;
    match &ty.kind {
        TypeKind::String => quote! { Text },
        TypeKind::Bytes => quote! { Vec<u8> },
        TypeKind::Int => quote! { i64 },
        TypeKind::Bool => quote! { bool },
        TypeKind::Id => quote! { BaseId },
        TypeKind::Struct(st) => {
            let ident = mk_ident(&st.name);
            quote! { #ident }
        }
        TypeKind::Enum(st) => {
            let ident = mk_ident(&st.name);
            quote! { #ident }
        }
        TypeKind::Optional(opt) => {
            let inner = vtype_to_rtype(opt);
            quote! {
                Option<#inner>
            }
        }
    }
}

/// Returns the name of all custom types reachable from actions or effects.
#[allow(clippy::panic)]
fn collect_reachable_types(target: &CompileTarget) -> HashSet<&str> {
    fn visit<'a>(
        struct_defs: &HashMap<&str, &'a [FieldDefinition]>,
        found: &mut HashSet<&'a str>,
        ty: &'a VType,
    ) {
        match &ty.kind {
            TypeKind::Struct(s) => {
                if found.insert(s.as_str()) {
                    for field in struct_defs[s.as_str()] {
                        visit(struct_defs, found, &field.field_type);
                    }
                }
            }
            TypeKind::Enum(s) => {
                found.insert(s.as_str());
            }
            TypeKind::Optional(inner) => visit(struct_defs, found, inner),
            _ => {}
        }
    }

    let struct_defs = target
        .struct_defs
        .iter()
        .map(|(id, fields)| (id.as_str(), fields.as_slice()))
        .collect::<HashMap<_, _>>();

    let mut found = HashSet::new();

    for def in target.action_defs.iter() {
        for param in def.params.iter() {
            visit(&struct_defs, &mut found, &param.ty);
        }
    }

    for id in &target.effects {
        let fields = target
            .struct_defs
            .get(id)
            .unwrap_or_else(|| panic!("Effect not defined: {id}"));
        for field in fields {
            visit(&struct_defs, &mut found, &field.field_type);
        }
    }

    found
}

/// Makes an identifier from a string, using raw identifiers (`r#mod`) when necessary.
fn mk_ident(string: impl AsRef<str>) -> syn::Ident {
    let string = string.as_ref();
    syn::parse_str::<syn::Ident>(string)
        .unwrap_or_else(|_| syn::Ident::new_raw(string, Span::call_site()))
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_mk_ident() {
        assert_eq!(mk_ident("foo").to_string(), "foo");
        assert_eq!(mk_ident("mod").to_string(), "r#mod");
    }
}
