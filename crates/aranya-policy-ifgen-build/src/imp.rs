use std::collections::{HashMap, HashSet};

use aranya_policy_ast::{FieldDefinition, VType};
use aranya_policy_module::{Module, ModuleData, ModuleV0};
use proc_macro2::{Span, TokenStream};
use quote::quote;

/// Generate rust source code from a policy [`Module`].
pub fn generate_code(module: &Module) -> String {
    let m = {
        match &module.data {
            ModuleData::V0(m) => m,
        }
    };

    let reachable = collect_reachable_types(m);

    let structs = m
        .struct_defs
        .iter()
        .filter(|(id, _fields)| reachable.contains(id.as_str()))
        .map(|(id, fields)| {
            let doc = format!(" {} policy struct.", id);
            let name = mk_ident(&id);
            let names = fields.iter().map(|f| mk_ident(&f.identifier));
            let types = fields.iter().map(|f| vtype_to_rtype(&f.field_type));
            quote! {
                #[doc = #doc]
                #[value]
                pub struct #name {
                    #(pub #names: #types),*
                }
            }
        });

    let enums = m
        .enum_defs
        .iter()
        .filter(|(id, _values)| reachable.contains(id.as_str()))
        .map(|(id, values)| {
            let doc = format!(" {} policy enum.", id);
            let name = mk_ident(&id);
            let names = values.iter().map(|(id, _)| mk_ident(id));
            quote! {
                #[doc = #doc]
                #[value]
                pub enum #name {
                    #(#names),*
                }
            }
        });

    let effects = m.effects.iter().map(|s| {
        let fields = m
            .struct_defs
            .get(s)
            .expect(format!("Effect not defined: {s}").as_str());
        let doc = format!(" {} policy effect.", s);
        let ident = mk_ident(&s);
        let field_idents = fields.iter().map(|f| mk_ident(&f.identifier));
        let field_types = fields.iter().map(|f| vtype_to_rtype(&f.field_type));
        quote! {
            #[doc = #doc]
            #[effect]
            pub struct #ident {
                #(pub #field_idents: #field_types),*
            }
        }
    });

    let effect_enum = {
        let idents = m.effects.iter().map(|s| mk_ident(&s));
        quote! {
            #[effects]
            pub enum Effect {
                #(
                    #idents(#idents)
                ),*
            }
        }
    };

    let actions = {
        let sigs = m.action_defs.iter().map(|(id, args)| {
            let ident = mk_ident(&id);
            let argnames = args.iter().map(|arg| mk_ident(&arg.identifier));
            let argtypes = args.iter().map(|arg| vtype_to_rtype(&arg.field_type));
            quote! {
                fn #ident(&mut self, #(#argnames: #argtypes),*) -> Result<(), ClientError>;
            }
        });
        quote! {
            /// Implements all supported policy actions.
            #[actions]
            pub trait ActorExt {
                #( #sigs )*
            }
        }
    };

    prettyplease::unparse(&syn::parse_quote! {
        //! This code is @generated by `policy-ifgen`. DO NOT EDIT.
        #![allow(clippy::duplicated_attributes)]
        #![allow(clippy::enum_variant_names)]
        #![allow(missing_docs)]
        #![allow(non_snake_case)]
        #![allow(unused_imports)]

        extern crate alloc;

        use alloc::vec::Vec;

        use aranya_policy_ifgen::{
            macros::{actions, effect, effects, value},
            ClientError, Id, Value, Text,
        };

        #(#structs)*
        #(#enums)*

        /// Enum of policy effects that can occur in response to a policy action.
        #effect_enum
        #(#effects)*

        #actions
    })
}

fn vtype_to_rtype(ty: &VType) -> TokenStream {
    match ty {
        VType::String => quote! { Text },
        VType::Bytes => quote! { Vec<u8> },
        VType::Int => quote! { i64 },
        VType::Bool => quote! { bool },
        VType::Id => quote! { Id },
        VType::Struct(st) => {
            let ident = mk_ident(st);
            quote! { #ident }
        }
        VType::Enum(st) => {
            let ident = mk_ident(st);
            quote! { #ident }
        }
        VType::Optional(opt) => {
            let inner = vtype_to_rtype(opt);
            quote! {
                Option<#inner>
            }
        }
    }
}

/// Returns the name of all custom types reachable from actions or effects.
fn collect_reachable_types(module: &ModuleV0) -> HashSet<&str> {
    fn visit<'a>(
        struct_defs: &HashMap<&str, &'a [FieldDefinition]>,
        found: &mut HashSet<&'a str>,
        ty: &'a VType,
    ) {
        match ty {
            VType::Struct(s) => {
                if found.insert(s.as_str()) {
                    for field in struct_defs[s.as_str()] {
                        visit(struct_defs, found, &field.field_type);
                    }
                }
            }
            VType::Enum(s) => {
                found.insert(s.as_str());
            }
            VType::Optional(inner) => visit(struct_defs, found, inner),
            _ => {}
        }
    }

    let struct_defs = module
        .struct_defs
        .iter()
        .map(|(id, fields)| (id.as_str(), fields.as_slice()))
        .collect::<HashMap<_, _>>();

    let mut found = HashSet::new();

    for (_id, args) in &module.action_defs {
        for arg in args {
            visit(&struct_defs, &mut found, &arg.field_type);
        }
    }

    for id in &module.effects {
        let fields = module
            .struct_defs
            .get(id)
            .expect(format!("Effect not defined: {id}").as_str());
        for field in fields {
            visit(&struct_defs, &mut found, &field.field_type);
        }
    }

    found
}

/// Makes an identifier from a string, using raw identifiers (`r#mod`) when necessary.
fn mk_ident(string: impl AsRef<str>) -> syn::Ident {
    let string = string.as_ref();
    syn::parse_str::<syn::Ident>(string)
        .unwrap_or_else(|_| syn::Ident::new_raw(string, Span::call_site()))
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_mk_ident() {
        assert_eq!(mk_ident("foo").to_string(), "foo");
        assert_eq!(mk_ident("mod").to_string(), "r#mod");
    }
}
