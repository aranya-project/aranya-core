//! This code is @generated by `policy-ifgen`. DO NOT EDIT.
#![allow(clippy::duplicated_attributes)]
#![allow(clippy::enum_variant_names)]
#![allow(missing_docs)]
#![allow(non_snake_case)]
#![allow(unused_imports)]
extern crate alloc;
use alloc::vec::Vec;
use aranya_policy_ifgen::{
    macros::{actions, effect, effects, value},
    BaseId, ClientError, Value, Text,
};
/// Players policy struct.
#[value]
pub struct Players {
    pub X: BaseId,
    pub O: BaseId,
}
/// Player policy enum.
#[value]
pub enum Player {
    X,
    O,
}
/// Enum of policy effects that can occur in response to a policy action.
#[effects]
pub enum Effect {
    GameOver(GameOver),
    GameStart(GameStart),
    GameUpdate(GameUpdate),
}
/// GameOver policy effect.
#[effect]
pub struct GameOver {
    pub gameID: BaseId,
    pub winner: BaseId,
    pub p: Player,
}
/// GameStart policy effect.
#[effect]
pub struct GameStart {
    pub gameID: BaseId,
    pub players: Players,
}
/// GameUpdate policy effect.
#[effect]
pub struct GameUpdate {
    pub gameID: BaseId,
    pub player: BaseId,
    pub p: Player,
    pub X: i64,
    pub Y: i64,
}
/// Implements all supported policy actions.
#[actions]
pub trait ActorExt {
    fn StartGame(&mut self, players: Players) -> Result<(), ClientError>;
    fn MakeMove(&mut self, gameID: BaseId, x: i64, y: i64) -> Result<(), ClientError>;
}
