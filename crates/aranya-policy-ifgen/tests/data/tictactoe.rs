//! This code is @generated by `policy-ifgen`. DO NOT EDIT.
#![allow(clippy::duplicated_attributes)]
#![allow(clippy::enum_variant_names)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]
extern crate alloc;
use alloc::vec::Vec;
use aranya_policy_ifgen::{
    macros::{action, actions, effect, effects, value},
    ClientError, Id, Value, Text,
};
pub struct Persistent;
pub struct Ephemeral;
/// Players policy struct.
#[value]
pub struct Players {
    pub X: Id,
    pub O: Id,
}
/// Player policy enum.
#[value]
pub enum Player {
    X,
    O,
}
/// Enum of policy effects that can occur in response to a policy action.
#[effects]
pub enum Effect {
    GameOver(GameOver),
    GameStart(GameStart),
    GameUpdate(GameUpdate),
}
/// GameOver policy effect.
#[effect]
pub struct GameOver {
    pub gameID: Id,
    pub winner: Id,
    pub p: Player,
}
/// GameStart policy effect.
#[effect]
pub struct GameStart {
    pub gameID: Id,
    pub players: Players,
}
/// GameUpdate policy effect.
#[effect]
pub struct GameUpdate {
    pub gameID: Id,
    pub player: Id,
    pub p: Player,
    pub X: i64,
    pub Y: i64,
}
#[actions(interface = Persistent)]
pub enum PersistentAction {
    StartGame(StartGame),
    MakeMove(MakeMove),
}
#[actions(interface = Ephemeral)]
pub enum EphemeralAction {
    Temporary(Temporary),
}
/// StartGame policy action.
#[action(interface = Persistent)]
pub struct StartGame {
    pub players: Players,
}
/// MakeMove policy action.
#[action(interface = Persistent)]
pub struct MakeMove {
    pub gameID: Id,
    pub x: i64,
    pub y: i64,
}
/// Temporary policy action.
#[action(interface = Ephemeral)]
pub struct Temporary {
    pub n: i64,
    pub s: Text,
}
