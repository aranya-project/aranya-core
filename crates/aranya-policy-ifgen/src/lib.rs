#![cfg_attr(not(doctest), doc = include_str!("../README.md"))]
#![no_std]
#![allow(clippy::needless_doctest_main)]
#![warn(missing_docs)]

extern crate alloc;

use alloc::{collections::BTreeMap, vec::Vec};

/// Macros used in code generated by `policy_ifgen_build``.
pub mod macros {
    pub use aranya_policy_ifgen_macro::{actions, effect, effects, value};
}

pub use alloc::format;

pub use aranya_policy_vm::{
    Id, Identifier, KVPair, Struct, Text, TryFromValue, Value, ValueConversionError, ident,
};
pub use aranya_runtime::{ClientError, VmAction, VmEffect, vm_action, vm_effect};
#[cfg(feature = "serde")]
pub use serde;

/// Struct fields
pub type Fields = Vec<KVPair>;
/// Map of struct fields
pub type FieldMap = BTreeMap<Identifier, Value>;

/// An actor which can call policy actions.
pub trait Actor {
    /// Call an "untyped" policy action ([`VmAction`]).
    fn call_action(&mut self, action: VmAction<'_>) -> Result<(), ClientError>;
}

/// Possible errors from policy effect parsing.
#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, thiserror::Error)]
pub enum EffectsParseError {
    /// Effect has one or more extra fields.
    #[error("effect has one of more extra fields")]
    ExtraFields,
    /// Effect is missing an expected field.
    #[error("effect is missing an expected field")]
    MissingField,
    /// Effect has unexpected field type.
    #[error("effect has an unexpected field type")]
    FieldTypeMismatch,
    /// Effect has unknown effect name.
    #[error("effect has an unknown effect name")]
    UnknownEffectName,
}
