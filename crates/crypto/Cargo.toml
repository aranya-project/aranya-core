[package]
name = "crypto"
version = "0.1.0"
authors.workspace = true
edition.workspace = true
license.workspace = true
publish.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]

[features]
default = []

# Enable allocations.
alloc = [
	"aes-gcm/alloc",
	"buggy/alloc",
	"der/alloc",
	"ecdsa/alloc",
	"postcard/alloc",
	"zeroize/alloc",
]

# Enable BearSSL.
bearssl = [
	"dep:bearssl-sys",
]

# Enable BoringSSL.
boringssl = [
	"alloc",
	"dep:bssl-sys",
]

# Enable committing AEAD implementations.
committing-aead = [
	"dep:aes",
]

# Enable Ed25519 batch signature verification.
#
# NB: this is NOT supported on big-endian architectures.
#
# This is its own feature because of a weird interaction
# between cargo, ed25519-dalek, and VxWorks.
#
# ed25519-dalek's `batch` feature requires `alloc`, so normally
# we'd put "ed25519-dalek/batch" behind our `alloc` feature.
#
# However, ed25519-dalek's `batch` feature does not build for
# vxworks/ppc because its merlin dependency does not support
# big-endian architectures.
#
# Cargo does not support target-specific features, so we're
# unable to express "enable ed25519-dalek/batch only if `alloc`
# is enabled and the current architecture is little-endian."
ed25519_batch = [
	"alloc",
	"ed25519-dalek/batch",
]

# Build for Project Moonshot.
moonshot = [
	"dep:aes",
]

# Makes `OsRng` implement `Csprng`.
rand_core = [
	"rand_core/getrandom",
]

# Use std.
std = [
	"alloc",
	# If we're already using `std`, we might as well enable
	# `Csprng` support for `OsRng`. Doing this makes the
	# `#[cfg(...)]` blocks easier to manage.
	"rand_core",
	# We only pull in `rand` when `std` is enabled since we only
	# use it for `ThreadRng`.
	"dep:rand",

	"aes-gcm/std",
	"buggy/std",
	"der/std",
	"ecdsa/std",
	"subtle/std",
	"trouble/std",
	"zeroize/std",
]

# Include testing utilities.
test_util = [
	"alloc",
	"dep:serde_json",
	"dep:serde_repr",
	"dep:wycheproof",
]

#
# Nightly features
#

result_option_inspect = []

[dependencies]
aes = { version = "0.8", default-features = false, features = ["zeroize"], optional = true }
aes-gcm = { version = "0.10", default-features = false, features = ["aes"] }
base58 = { path = "../base58", default-features = false }
bearssl-sys = { git = "https://git.spideroak-inc.com/spideroak-inc/bearssl.git", tag = "v0.2.0", optional = true }
bssl-sys = { git = "https://git.spideroak-inc.com/spideroak-inc/bssl.git", branch = "main", optional = true }
buggy = { path = "../buggy", default-features = false }
byteorder = { workspace = true, default-features = false }
cfg-if = { workspace = true, default-features = false }
crypto-common = { version = "0.1", default-features = false }
der = { version = "0.7", default-features = false }
ecdsa = { version = "0.16", default-features = false, features = ["signing", "verifying", "der"] }
ed25519-dalek = { version = "2.0.0-rc.3", default-features = false, features = ["zeroize"] }
elliptic-curve = { version = "0.13", default-features = false, features = ["ecdh", "arithmetic", "sec1"] }
generic-array = { version = "1", default-features = false, features = ["const-default", "serde", "zeroize"] }
lazy_static = { version = "1.4", default-features = false, features = ["spin_no_std"] }
more-asserts = { version = "0.3", default-features = false }
p256 = { version = "0.13", default-features = false, features = ["ecdh", "ecdsa"] }
p384 = { version = "0.13", default-features = false, features = ["ecdh", "ecdsa"] }
postcard = { workspace = true, default-features = false, features = ["heapless", "experimental-derive"] }
# `rand` is only pulled in when `std` is enabled. It's only used
# to add trait impls for `ThreadRng`.
rand = { workspace = true, features = ["std", "std_rng"], optional = true }
serde = { workspace = true, default-features = false, features = ["derive"] }
serde_json = { version = "1", default-features = false, optional = true }
serde_repr = { version = "0.1", default-features = false, optional = true }
sha2 = { version = "0.10", default-features = false }
siphasher = { version = "1", default-features = false }
spin = { workspace = true, default-features = false, features = ["mutex", "once", "spin_mutex"] }
subtle = { version = "2.5", default-features = false, features = ["core_hint_black_box"] }
trouble = { path = "../trouble", default-features = false }
typenum = { version = "1", default-features = false, features = ["const-generics"] }
# Only pulled into non-dev builds if `test_util` is enabled. It
# won't bloat release builds, though, since users of this crate
# should only use this feature inside [dev-dependencies].
wycheproof = { version = "0.5", optional = true }
zeroize = { version = "1", default-features = false, features = ["zeroize_derive"] }

# While `getrandom` supports VxWorks, it only supports VxWorks 7.
# Since it uses `target_os = "vxworks"`, it indiscriminately
# tries to build for all VxWorks versions, resulting in
# compilation errors for VxWorks 6.9.
#
# We currently do not need to support VxWorks 7, so just disable
# `getrandom` for VxWorks.
[target.'cfg(target_os = "vxworks")'.dependencies]
rand_core = { workspace = true, default-features = false }

[target.'cfg(not(target_os = "vxworks"))'.dependencies]
getrandom = { version = "0.2", features = ["custom"] }
rand_core = { workspace = true, default-features = false }

[dev-dependencies]
# A little bit of a hack: always certain features for tests and
# examples.
crypto = { path = ".", features = ["alloc", "test_util"] }
postcard = { workspace = true, features = ["alloc", "heapless"] }
rand = { workspace = true, features = ["std", "std_rng"] }
serde = { workspace = true, default-features = false, features = ["derive"] }
serde_json = { version = "1", default-features = false }
serde_repr = { version = "0.1", default-features = false }
wycheproof = { version = "0.5" }

[[example]]
name = "hsm"
crate-type = ["lib"]

[package.metadata.docs.rs]
all-features = true

[package.metadata.cargo-all-features]
always_include_features = [
	"alloc",
	"bearssl",
	"boringssl",
	"committing-aead",
	"ed25519_batch",
	"rand_core",
	"std",
	"test_util",
]

skip_feature_sets = []

denylist = [
	"result_option_inspect",
]

[package.metadata.cargo-machete]
ignored = ["old-generic-array"]
