// Important things to understand about Pest:
// - It consumes one character at a time
// - It does not backtrack beyond the current rule
// - It automatically inserts WHITESPACE between any tokens joined by ~
//   (unless the it's an @{} rule)
// - ! is a predicate check, not a negative character match.
//   (!"a" ~ ANY) checks that the next character is not "a", then
//   consumes one character. It is equivalent to regex [^a].

// Whitespace is spaces, tabs, and newlines (which includes CR, CRLF, and LF).
WHITESPACE = _{ " " | "\t" | NEWLINE }
// Comments are C-style, double-slashes to end of line, and slash-star blocks.
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

// # Basic Bits

// ## Identifier
// An identifier starts with an ASCII alpha character followed by
// zero or more alphanumeric characters. This is used for variable
// names, field names, function names, etc.
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// ## Types
// Core types.
string_t = { "string" }
bytes_t = { "bytes" }
int_t = { "int" }
bool_t = { "bool" }
id_t = { "id" }
// An optional type is any of the core types preceded by "optional"
// (so no "optional optional" allowed).
optional_t = { "optional" ~ !"optional" ~ vtype }
// All structs have a name
struct_t = { "struct" ~ identifier }
// enumeration type
enum_t = { "enum" ~ identifier }
// A vtype is any of the core types or an optional. (I can't call it
// "type" because that's a reserved keyword in Rust)
vtype = _{ string_t | bytes_t | int_t | bool_t | id_t | struct_t | enum_t | optional_t }

// ## Fields
// A field definition is an identifier followed by a type. Used in
// struct definitions, function arguments, etc.
field_definition = { identifier ~ vtype }
// A field definition list is a list of field definitions. Trailing
// commas are allowed in any list.
field_definition_list = _{ field_definition ~ ("," ~ field_definition)* ~ ","? }
// Keyword for dynamic effect fields
dynamic = { "dynamic" }
// An effect field definition works like a regular field but adds the
// optional "dynamic" keyword.
effect_field_definition = { identifier ~ vtype ~ dynamic? }
// Ditto the list form
effect_field_definition_list = _{ effect_field_definition ~ ("," ~ effect_field_definition)* ~ ","? }

// ## Structs
// A struct definition is a list of field definitions surrounded by
// curly brackets. Note that there are no actual struct types yet -
// this is only used as a building block for other definitions.
struct_def = _{ "{" ~ field_definition_list? ~ "}" }
// An effect struct definition is similar but supports the additional
// "dynamic" keyword.
effect_struct_def = _{ "{" ~ effect_field_definition_list? ~ "}" }
// A struct literal field is an identifier and an expression separated
// by a colon. The colon marks this as defining the value of the field
// instead of its type.
struct_literal_field = { identifier ~ ":" ~ expression }
// A struct literal field list is a list of struct literal fields.
struct_literal_field_list = _{ struct_literal_field ~ ("," ~ struct_literal_field)* ~ ","? }
// A struct literal is a struct literal field list surrounded by curly
// brackets. Note that you cannot define struct values - these are only
// used in commands.
struct_literal = _{ "{" ~ struct_literal_field_list? ~ "}" }
// A named struct literal begins with an identifier. Effects and
// Command literals are named struct literals.
named_struct_literal = { identifier ~ struct_literal }

// ## Facts
// A fact signature key is a list of fields surrounded by square
// brackets.
fact_signature_key = { "[" ~ field_definition_list? ~ "]" }
// A fact signature value is a list of fields surrounded by curly
// brackets.
fact_signature_value = { "{" ~ field_definition_list? ~ "}" }
// A fact signature is made up of an identifier, a key definition, and
// a value definition.
fact_signature = { identifier ~ fact_signature_key ~ "=>" ~ fact_signature_value }
// A bind value is only valid in fact literals inside a query
// expression. It is used to mark values that the query returns.
bind = { "?" }
// key/value pair defining a fact field
fact_literal_field = { identifier ~ ":" ~ (expression | bind) }
// sequence of fact fields
fact_literal_field_list = _{ fact_literal_field ~ ("," ~ fact_literal_field)* ~ ","? }
// A fact literal key is just like a fact signature key except it
// defines values with literal fields.
fact_literal_key = { "[" ~ fact_literal_field_list? ~ "]" }
// Ditto fact literal values.
fact_literal_value = { "{" ~ fact_literal_field_list? ~ "}" }
// A fact literal looks just like a fact definition except it defines
// values for the keys an values.
fact_literal = { identifier ~ fact_literal_key ~ ("=>" ~ fact_literal_value)? }

// ## Misc
// Function arguments are a field list surrounded by parentheses. It's
// used for both actions and functions.
function_arguments = { "(" ~ field_definition_list? ~ ")" }

// # Expressions
// This grammar implements a standard prefix/infix/postfix expression
// grammar with precedence (with the help of the pratt parser defined
// in policy/parse.rs).

// ## Atoms
// An int is a sequence of one or more digits
int_literal = @{ ASCII_DIGIT+ }
// A hex escape is an x followed by a two-digit hexadecimal number
hex_escape = _{ "x" ~ ASCII_HEX_DIGIT{2} }
// A string literal is text surrounded by double-quotes.
// Escapes allowed: \n, \", \\, and two-digit hex escapes (e.g. \xf7)
string_literal = @{ "\"" ~ (("\\" ~ (hex_escape | "n" | "\\" | "\"")) | (!("\"" | "\\") ~ ANY))* ~ "\"" }
// A bool is either true or false
btrue = { "true" }
bfalse = { "false" }
bool_literal = { btrue | bfalse }
// A function call is an identifier followed by zero or more arguments
// in parentheses. Tailing commas allowed.
function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)* ~ ","?)? ~ ")" }
// A foreign function call is an identifier followed by double-colons
// and a function call.
foreign_function_call = { identifier ~ "::" ~ function_call }
// Split "Result::Ok" into enum name and value name in order to resolve value to integer
enum_reference = { identifier ~ "::" ~ identifier }

// Optional literals are "None" or "Some <x>", where <x> is any
// expression. Note that the grammar allows the construction of
// invalid types like `Some None`. This is checked in a later stage.
none = { "None" }
some = { "Some" }
optional_literal = { none | (some ~ "(" ~ expression ~ ")") }
// A query expression evaluates a fact literal, returning a result
// object containing all of the value fields marked with the bind
// token.
query = { "query" ~ fact_literal }
// exists is query that checks for the existence of a fact
exists = { "exists" ~ fact_literal }
// count facts up to a given limit
count_up_to = { "count_up_to" ~ int_literal ~ fact_literal}
// count facts, returning true if the given count was reached
at_least = { "at_least" ~ int_literal ~ fact_literal}
// count facts, returning true if the given count was not exceeded
at_most = { "at_most" ~ int_literal ~ fact_literal }
// count facts, returning true if the number of facts found equals the expected number
exactly = { "exactly" ~ int_literal ~ fact_literal }
// Similar to the `match` statement, but resolves to a value. e.g. `let x = match { ... }`
match_expression = { "match" ~ expression ~ "{" ~ match_arm_expr* ~ "}" }
match_arm_expr = { (match_arm_expression | match_default) ~ "=>" ~ expression }
// An if/else expression is a logical statement that returns one
// expression or the other depending on the boolean evaluation of the
// first expression.
if_expr = { "if" ~ expression ~ "{" ~ expression ~ "}" ~ "else" ~ "{" ~ expression ~ "}" }
// serialize() and deserialize() transform command structs to/from bytes
serialize = { "serialize(" ~ expression ~ ")" }
deserialize = { "deserialize(" ~ expression ~ ")" }
// Internal functions are just expressions that have their rules that
// don't fit into the pratt parser.
internal_function = _{
    query |
    exists |
    count_up_to |
    at_least |
    at_most |
    exactly |
    match_expression |
    if_expr |
    serialize |
    deserialize
}
// A block expression is a series of statements followed by an expression
// the statement list is separated for easier parsing
block_statement_list = { statements* }
block_expression = { "{" ~ block_statement_list ~ ":" ~ expression ~ "}" }
// An atom is any of the literals, an internal function,
// a function call, an identifier, or a parenthetical sub-expression.
atom = _{
    int_literal |
    string_literal |
    bool_literal |
    optional_literal |
    named_struct_literal |
    internal_function |
    function_call |
    foreign_function_call |
    enum_reference |
    identifier |
    block_expression |
    "(" ~ expression ~ ")"
}

// ## Infix operators
add = { "+" }
subtract = { "-" }
greater_than = { ">" }
less_than = { "<" }
greater_than_or_equal = { ">=" }
less_than_or_equal = { "<=" }
equal = { "==" }
not_equal = { "!=" }
and = { "&&" }
or = { "||" }
dot = { "." }
infix_op = _{ add | subtract | and | or | dot | equal | not_equal | greater_than_or_equal | less_than_or_equal | greater_than | less_than }

// ## Prefix operators
neg = { "-" }
not = { "!" }
unwrap = { "unwrap" }
check_unwrap = { "check_unwrap" }
prefix_op = _{ neg | not | unwrap | check_unwrap }

// ## Postfix operators
is = { "is" ~ (none | some) }
postfix_op = _{ is }

// The core expression syntax - atoms joined by infix operators, where
// each atom can have zero or more prefix or postfix operators. Note
// that this creates a left-associative binary parse tree for
// operators of equivalent precedence: a + b + c results in
// Add(Add(a, b), c).
expression = { prefix_op* ~ atom ~ postfix_op* ~ (infix_op ~ prefix_op* ~ atom ~ postfix_op*)* }

// # Statements
// The action statement calls an action. Only valid inside an action block.
action_call = { "action" ~ function_call }
// The publish statement publishes the expression as a command.
publish_statement = { "publish" ~ expression }
// A let statement assigns a value to an identifier. Identifiers can
// only be assigned once.
let_statement = { "let" ~ identifier ~ "=" ~ expression }
// The check statement evaluates an expression and fails if it is false
check_statement = { "check" ~ expression }
// The match statement matches on an expression and executes one of its
// arms if it matches. Matches must be specified exhaustively (which
// means for anything other than bool you will have a default value).
match_arm_expression = { expression ~ ("|" ~ expression)* }
match_default = { "_" }
match_arm = { (match_arm_expression | match_default) ~ "=>" ~ statement_block }
match_statement = { "match" ~ expression ~ "{" ~ match_arm* ~ "}" }
// if - else if - else
if_statement = {
    "if" ~ expression ~ if_branch
    ~ ("else" ~ "if" ~ expression ~ if_branch)*
    ~ ("else" ~ if_branch)?
}
// need a non-silent rule to distinguish these.
if_branch = { statement_block }
// The finish statement contains a block of statements which update
// fact state and produce effects. The finish statement ends further
// policy processing after executing its statements.
finish_statement = { "finish" ~ statement_block }
// map - iterate over facts
map_statement = { "map" ~ fact_literal ~ "as" ~ identifier ~ statement_block }
// The create statement creates a fact.
create_statement = { "create" ~ fact_literal }
// The update statement updates a matching fact to a new value.
update_statement = { "update" ~ fact_literal ~ "to" ~ fact_literal_value }
// The delete statement deletes a fact.
delete_statement = { "delete" ~ fact_literal }
// The emit statement outputs an effect with the given expression.
emit_statement = { "emit" ~ expression }
// The return statement returns from a function
return_statement = { "return" ~ expression }
// debug_assert() optionally runs the contained expression if the debug flag is enabled
debug_assert = { "debug_assert(" ~ expression ~ ")" }

// ## All statements
statements = _{
    publish_statement |
    let_statement |
    check_statement |
    match_statement |
    if_statement |
    finish_statement |
    map_statement |
    create_statement |
    update_statement |
    delete_statement |
    emit_statement |
    return_statement |
    debug_assert | // Note that debug_assert must take precendence over function_call due to the overlapping syntax
    function_call |
    action_call
}
statement_block = _{ "{" ~ statements* ~ "}" }

// ## Command blocks
// Command attributes
attributes_block = { "attributes" ~ struct_literal }
// The fields statement defines the fields of a command with a struct
// literal.
fields_block = { "fields" ~ struct_def }
// The policy statement defines a block of statements comprising the
// actual policy governing the command.
policy_block = { "policy" ~ statement_block }
// The recall statement defines a block of statements that will be
// executed when a command of this type is recalled.
recall_block = { "recall" ~ statement_block }
// The seal block is a pure function with an implicit `this` parameter
// like the policy/recall blocks. It returns an envelope object.
seal_block = { "seal" ~ statement_block }
// The open block is a pure function with an implicit `envelope`
// parameter. It returns a command struct for the command it is part of.
open_block = { "open" ~ statement_block }
// Union of all command blocks
command_blocks = _{ attributes_block | fields_block | seal_block | open_block | policy_block | recall_block }

// # Top-level Statements
// fact Foo[]=>{}
immutable_modifier = { "immutable" }
use_definition = { "use" ~ identifier }
fact_definition = { immutable_modifier? ~ "fact" ~ fact_signature }
// action foo(a int) { ... }
action_definition = { "action" ~ identifier ~ function_arguments ~ statement_block }
// effect Foo { bar id }
effect_definition = { "effect" ~ identifier ~ effect_struct_def }
// struct Foo { bar id }
struct_definition = { "struct" ~ identifier ~ struct_def }
// enum Result { OK, Err }
enum_definition = { "enum" ~ identifier ~ "{" ~ identifier ~ ("," ~ identifier)* ~ ","? ~ "}" }
// command Foo { ... }
command_definition = { "command" ~ identifier ~ "{" ~ command_blocks+ ~ "}" }
// function foo(a int) int { return a }
function_decl = { "function" ~ identifier ~ function_arguments ~ vtype }
function_definition = { function_decl ~ statement_block }
/// finish function foo(a int) { create F[]=>{} }
finish_function_decl = { "finish" ~ "function" ~ identifier ~ function_arguments }
finish_function_definition = { finish_function_decl ~ statement_block }
// This let statement assigns a value to an identifier in a global scope
// global let statements are overwritten by local ones.
global_let_statement = { "let" ~ identifier ~ "=" ~ expression }

top_level_statement = _{
    use_definition |
    fact_definition |
    action_definition |
    effect_definition |
    struct_definition |
    enum_definition |
    command_definition |
    function_definition |
    finish_function_definition |
    global_let_statement }

// The file is a series of top level statements. SOI and EOI are start/
// end of input markers. Without the end of input marker, the input
// would only be parsed until the first non-matching text and you would
// get a partially parsed document instead of a parse error.
file = _{ SOI ~ top_level_statement* ~ EOI }

ffi_function_decl = _{ function_decl | finish_function_decl }
ffi_def = _{ SOI ~ ffi_function_decl ~ EOI }

ffi_struct_def = _{ SOI ~ struct_definition* ~ EOI }
