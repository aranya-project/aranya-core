[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = 1
RUSTDOCFLAGS = { value = "", condition = { env_not_set = ["RUSTDOCFLAGS"] } }
NIGHTLY = { script = ["cat rust-nightly.txt"] }

[config]
default_to_workspace = false
skip_core_tasks = true
skip_crate_env_info = true
skip_git_env_info = true
skip_rust_env_info = true


[tasks.default]
description = "List tasks"
script = "cargo make --quiet --list-all-steps --hide-uninteresting"


# Build
[tasks.build-code]
category = "build"
description = "Build Code"
command = "cargo"
args = ["build", "--verbose", "--release"]


# Test
[tasks.unit-tests]
category = "test"
description = "Run Unit Tests"
command = "cargo"
args = ["--verbose", "test-all-features"]
dependencies = ["install-cargo-all-features"]


# Security
[tasks.cargo-audit]
category = "security"
install_crate = { crate_name = "cargo-audit", version = "0.18.3", binary = "cargo-audit", test_arg = "-V" }
command = "cargo"
args = ["audit"]
dependencies = ["gen-lockfile"]

[tasks.gen-lockfile]
private = true
command = "cargo"
args = ["generate-lockfile"]

[tasks.cargo-deny]
category = "security"
install_crate = { crate_name = "cargo-deny", version = "0.14.10", binary = "cargo-deny", test_arg = "-V" }
command = "cargo"
args = ["deny", "check"]


# VxWorks
[tasks.setup-vxworks-env]
category = "vxworks"
description = "Setup vxworks environment"
script = "rustup component add --toolchain ${NIGHTLY} rust-src"
dependencies = ["install-nightly"]

[tasks.build-vxworks-code]
category = "vxworks"
description = "Build vxworks code"
toolchain = "${NIGHTLY}"
command = "cargo"
args = [
    "build",
    "-Zbuild-std=core",
    "--target=powerpc-wrs-vxworks",
    "--release",
    # For now, only try to build the `crypto` crate since it's
    # the only crate that's used on VxWorks.
    "--package=crypto",
    # Build the variant used by the Moonshot project since
    # it's currently our only use of VxWorks.
    "--no-default-features",
    "--features=moonshot",
    "${@}",
]
dependencies = ["setup-vxworks-env"]


# Correctness
[tasks.correctness]
category = "correctness"
description = "Run correctness checks"
dependencies = [
    "fmt",
    "check-features",
    "clippy",
    "check-canaries",
]

[tasks.check-fmt]
category = "correctness"
description = "Check code formatting"
toolchain = "${NIGHTLY}"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]
dependencies = ["install-nightly"]

[tasks.fmt]
category = "correctness"
description = "Format code"
toolchain = "${NIGHTLY}"
command = "cargo"
args = ["fmt", "--all"]
dependencies = ["install-nightly"]

[tasks.check-features]
category = "correctness"
description = "Check features"
command = "cargo"
args = ["--verbose", "check-all-features"]
dependencies = ["install-cargo-all-features"]

[tasks.clippy]
category = "correctness"
description = "Run clippy to lint code"
workspace = true
script = '''
cargo clippy
cargo clippy --tests --benches --examples
cargo clippy --no-default-features
'''
install_crate = { rustup_component_name = "clippy" }

[tasks.check-canary-std]
category = "correctness"
description = "Check no-std support"
command = "cargo"
args = ["check", "--target=aarch64-unknown-none"]
cwd = "canaries/canary-std"
dependencies = ["install-no-std-target"]

[tasks.check-canary-alloc]
category = "correctness"
description = "Check no-alloc support"
command = "cargo"
args = ["check", "--target=aarch64-unknown-none"]
cwd = "canaries/canary-alloc"
dependencies = ["install-no-std-target"]

[tasks.check-canaries]
category = "correctness"
description = "Check no-std/no-alloc support"
dependencies = ["check-canary-alloc", "check-canary-std"]

[tasks.install-no-std-target]
private = true
script = "rustup target add aarch64-unknown-none"

# Docs
[tasks.gen-docs-nightly]
category = "docs"
description = "Generate docs with rust nightly"
toolchain = "${NIGHTLY}"
env = { RUSTDOCFLAGS = "--cfg docs ${RUSTDOCFLAGS}" }
command = "cargo"
args = ["doc", "--all-features", "--workspace"]
dependencies = ["install-nightly"]

[tasks.zip-docs]
category = "docs"
description = "Zip docs"
script = "zip -qr docs.zip target/doc"


# Misc
[tasks.install-nightly]
description = "Install nightly rust"
# First check if the toolchain is installed, because that is much faster.
# Don't do this if you want to keep a rolling channel up-to-date.
script = "rustup run ${NIGHTLY} true 2>/dev/null || rustup toolchain install ${NIGHTLY}"

[tasks.git-unchanged]
description = "Verify files are unchanged"
script = '''
git diff
status=$(git status -s)
if [[ -n "$status" ]]; then
    echo "$status"
    exit
fi
'''

[tasks.install-cargo-all-features]
private = true
install_crate = { crate_name = "cargo-all-features", version = "1.10.0", binary = "cargo-check-all-features", test_arg = ["-V"] }
